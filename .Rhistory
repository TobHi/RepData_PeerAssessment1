submit()
sat %>%
select(-contains(total")) %>%
gather(part_sex, count, -score_range)
print
part_sex
;
submit()
sat %>%
select(-contains(total")) %>%
gather(part_sex, count, -score_range)
sat %>%   select(-contains(total")) %>%   gather(part_sex, count, -score_range)
sat %>%
select(-contains(total")) %>%
gather(part_sex, count, -score_range)
sat %>%  select(-contains(total"))
sat %>%
select(-contains(total"))
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
Sys.setlocale("en_US.UTF-8)
""
)
Sys.setlocale("en_US.UTF-8")
Sys.setlocale("en_US.UTF-8")
library(lubridate)
help(package = lubridate)
this_day <-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ydm("1989 May 17")
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
ft1
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc<-now("America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
mdist <- function(x,y,cx,cy){
distTmp <- matrix(NA,nrow=3,ncol=12)
distTmp[1,] <- (x-cx[1])^2 + (y-cy[1])^2
distTmp[2,] <- (x-cx[2])^2 + (y-cy[2])^2
distTmp[3,] <- (x-cx[3])^2 + (y-cy[3])^2
return(distTmp)
}
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
ausw<-sample(1:12,size = 3)
df<-as.data.frame(x)
View(df)
df_<-cbind(x,y)
View(df_)
df<-cbind(x,y)
rm(df_)
View(df)
startClust<-df[ausw,]
View(startClust)
startCx<-x[ausw]
startCy<-y[ausw]
distTmp<-mdist(x,y,startCx,startCy)
mdist <- function(x,y,cx,cy){
distTmp <- matrix(NA,nrow=3,ncol=12)
distTmp[1,] <- (x-cx[1])^2 + (y-cy[1])^2
distTmp[2,] <- (x-cx[2])^2 + (y-cy[2])^2
distTmp[3,] <- (x-cx[3])^2 + (y-cy[3])^2
return(distTmp)
}
distTmp<-mdist(x,y,startCx,startCy)
View(distTmp)
newClust<-apply(distTmp,2,which.min)
cols1<-c("red","green","blue")
plot(x,y,col=cols1[newClust2],pch=19,cex=2)
plot(x,y,col=cols1[newClust],pch=19,cex=2)
points(startCx,startCy,col=c("red","green","blue"),pch=3,cex=3,lwd=3)
tapply(x,newClust,mean)
newCx<-tapply(x,newClust,mean)
newCy<-tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
distTmp2<-mdist(x,y,newCx,newCy)
newClust2<-apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
finalCx<-tapply(x,newClust2,mean)
finalCy<-tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmObj<-kmeans(x = df,centers = 3)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(df,6)$cluster,pch=19,cex=2)
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
x = 1:20
w = 1+sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
points(fm)
plot(fm)
plot(fm)
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
ls()
rm(x,y)
x = 1:20
w = 1+sqrt(x)/2
dummy <- data.frame(x=x, y= x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
plot(fm)
plot(x, y)
x <- rnorm(50)
y <- rnorm(x)
plot(x, y)
abline(fm)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages(flexclust)
install.packages("flexclust")
library(flexcluster)
library(flexclust)
res = kcca(data, 10, family=kccaFamily(dist=distCor))
attributes(res)
showMethods(distCor)
distCor
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
View(d)
is.data.frame(d)
df <- data.frame(x = 1, y = 1:10, z = rnorm(10))
View(df)
df.aree <- t(df.aree)
df2 <- t(df)
View(df2)
class(df2)
df2 <- as.data.frame(df2)
class(df2)
str(df2)
apply(df2,2,class)
apply(df2,1,class)
apply(df2,2,sum)
apply(df2,2,[1])
testfun <- function(x){
print(x)
}
tesfun(2)
testfun(2)
testfun(c(1,2,3))
apply(df2,2,testfun)
i <- 1
testfun <- function(x){
print(i)
print(x)
i <- i +1
}
testfun(c(1,2,3))
testfun(c(1,2,3))
testfun <- function(x){
x[1]
}
testfun(c(1,2,3))
apply(df2,2,testfun)
df <- data.frame(x = 3, y = 1:10, z = rnorm(10))
df3 <- t(df)
df3 <- as.data.frame(df2)
testfun <- function(x,y){
x[1]*y[1]
}
testfun(c(1,2,3),c(2,3,4))
apply(df2,2,testfun(...,y=df3[,1]))
apply(df2,2,testfun(y=df3[,1]))
testfun2 <- function(x){
tesfun(x,c(1,2,3))
}
testfun2(c(3,2,3))
search()
funfun <- function(z){
print(i)
}
funfun(9)
funfunfun <- function(x){
funfun(x)
}
funfunfun(10)
testfun2 <- function(x){
testfun(x,c(1,2,3))
}
testfun2(c(3,2,3))
apply(df2,2,testfun2())
apply(df2,2,testfun2)
View(df2)
testfun2 <- function(x){
print(x)
testfun(x,c(1,2,3))
}
apply(df2,2,testfun2)
View(df2)
testfun <- function(x,y){
print(y)
x[1]*y[1]
}
testfun2 <- function(x){
# print(x)
testfun(x,c(1,2,3))
}
apply(df2,2,testfun2)
testfun2 <- function(x){
# print(x)
testfun(x,c(4,2,3))
}
apply(df2,2,testfun2)
apply(df2,2,function(x){testfun(x,y=df3[,1])})
View(df3)
View(df3)
View(df)
df3 <- t(df)
df3 <- as.data.frame(df2)
df3 <- as.data.frame(df3)
apply(df2,2,function(x){testfun(x,y=df3[,1])})
View(df3)
df3 <- t(df)
df3 <- as.data.frame(df3)
View(df3)
apply(df2,2,function(x){testfun(x,y=df3[,1])})
testfun <- function(x,y){
print(i)
i<<-i+1
x[1]*y[1]
}
apply(df2,2,function(x){testfun(x,y=df3[,1])})
x <- c(-0.5, 0, 1, 1, 1.5); y <- c( 0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
library(swirl)
swirl
swirl()
install_from_swirl("Statistical_Inference")
swirl
swirl()
33/36
deck#
13*4
1/13
0
3/13
2/12
2/51
0.8*1.6/2
0.8*1.6/2
mypdf
integrate(mypdf,lower=0,upper=1.6)
sqrt(2)
swirl()
library(swirl)
swirl()
0.997*0.001
(1-0.985)*0.999
0.997*0.001/(0.997*0.001+(1-0.985)*0.999)
library(stats)
fit <- lm(Ozone ~ Wind + Solar.R + Temp, data = airquality)
summary(fit)
library(xtable)
install.packages(xtable)
install.packages("xtable")
dir
ls
dir()
getwd()
setwd("C:/Users/Tobi/Documents/GitHub/RepData_PeerAssessment1")
dir()
activity<-read.csv(file = "activity.csv")
View(activity)
str(activity)
as.Date(activity$date)
activity$date<-as.Date(activity$date)
str(activity)
View(activity)
unique(activity$date)
## Loading and preprocessing the data
length(unique(activity$date))
sum(activity$steps)
sum(activity$steps,na.rm = TRUE)
sum(activity$steps,na.rm = TRUE) / length(unique(activity$date))
View(activity)
aggregate(activity[, 1], list(activity$date), mean)
aggregate(activity[, 1], list(activity$date), mean(na.rm = TRUE))
aggregate(activity[, 1], list(activity$date), mean(...,na.rm = TRUE))
complete.cases(activity)
activity[complete.cases(activity),]
a<-activity[complete.cases(activity),]
View(a)
aggregate(a[, 1], list(a$date), mean)
aggregate(a[, 1], list(a$date), sum)
aa<-aggregate(a[, 1], list(a$date), sum)
View(aa)
hist(aa)
hist(aa$x)
mean(aa$x)
sum(activity$steps,na.rm = TRUE) / length(unique(activity$date))
median(aa$x)
activity_complete<-activity[complete.cases(activity),]
steps_per_day<-aggregate(activity_complete[, 1], list(activity_complete$date), sum)
hist(steps_per_day$x)
mean(steps_per_day$x)
median(steps_per_day$x)
hist(steps_per_day$x,xlab = "Steps per day",title="Histogram")
hist(steps_per_day$x,xlab = "Steps per day",main = "fdf")
hist(steps_per_day$x,xlab = "Steps per day",main = "Histogram")
activity$steps[is.na(activity$steps)] <- 0
View(activity)
View(activity)
steps_per_interval<-aggregate(activity[, 1], list(activity_complete$interval), mean)
steps_per_interval<-aggregate(activity[, 1], list(activity$interval), mean)
View(steps_per_interval)
plot(x = steps_per_day$Group.1,y=steps_per_day$x,type = "l")
str(steps_per_day)
plot(x = steps_per_interval$Group.1,y=steps_per_interval$x,type = "l")
which.max(steps_per_interval$x)
steps_per_interval
steps_per_interval[which.max(steps_per_interval$x),]
steps_per_interval[which.max(steps_per_interval$x),1]
sum(complete.cases(activity))
sum(!complete.cases(activity))
complete.cases(activity)
activity<-read.csv(file = "activity.csv")
sum(complete.cases(activity))
sum(!complete.cases(activity))
steps_per_interval<-aggregate(activity_complete[, 1], list(activity_complete$interval), mean)
plot(x = steps_per_interval$Group.1,y=steps_per_interval$x,type = "l")
steps_per_interval[which.max(steps_per_interval$x),1]
activity_na_filled <- activity
activity_na_filled$steps[is.na(activity_na_filled$steps)] <- steps_per_interval[is.na(activity_na_filled$steps)]
activity_na_filled$steps[is.na(activity_na_filled$steps)] <- steps_per_interval$x[is.na(activity_na_filled$steps)]
View(steps_per_interval)
length(activity_na_filled)
size(activity_na_filled)
nrow(activity_na_filled)
View(steps_per_interval)
View(activity)
i<-5
activity_na_filled[i,3]
View(steps_per_interval)
steps_per_interval[steps_per_interval$Group.1=activity_na_filled[i,3] ,2]
steps_per_interval[steps_per_interval$Group.1==activity_na_filled[i,3] ,2]
View(steps_per_interval)
activity_na_filled <- activity
for i in 1:nrow(activity_na_filled)
{
if is.na(activity_na_filled$steps)
{
activity_na_filled$steps <- steps_per_interval[steps_per_interval$Group.1==activity_na_filled[i,3] ,2]
}
}
activity_na_filled <- activity
for (i in 1:nrow(activity_na_filled))
{
if is.na(activity_na_filled$steps)
{
activity_na_filled$steps <- steps_per_interval[steps_per_interval$Group.1==activity_na_filled[i,3] ,2]
}
}
View(activity_na_filled)
activity_na_filled[i,0]
activity_na_filled[i,1]
activity_na_filled <- activity
for (i in 1:nrow(activity_na_filled))
{
if (is.na(activity_na_filled[i,1]))
{
activity_na_filled[i,1] <- steps_per_interval[steps_per_interval$Group.1==activity_na_filled[i,3] ,2]
}
}
View(activity_na_filled)
View(activity)
steps_per_day_clean<-aggregate(activity_na_filled[, 1], list(activity_na_filled$date), sum)
hist(steps_per_day_clean$x,xlab = "Steps per day",main = "Histogram")
mean(steps_per_day_clean$x)
median(steps_per_day_clean$x)
View(steps_per_day_clean)
install.packages("chron")
library("chron")
activity_na_filled$weekend = chron::is.weekend(activity_na_filled$date)
View(activity_na_filled)
str(activity_na_filled)
summary(activity_na_filled)
activity_na_filled$weekdaytype <- factor(ifelse(activity_na_filled$weekend,"weekend","weekday"))
summary(activity_na_filled)
library("lattice")
xyplot(activity_na_filled$steps~activity_na_filled$interval)
densityplot(activity_na_filled$steps~activity_na_filled$interval)
stripplot(activity_na_filled$steps~activity_na_filled$interval)
xyplot(activity_na_filled$steps~activity_na_filled$interval,type = "l")
plot(activity_na_filled$steps~activity_na_filled$interval,type = "l")
steps_per_interval_weekdaytype<-aggregate(activity_na_filled[, 1], list(activity_complete$interval), mean)
steps_per_interval_weekdaytype<-aggregate(activity_na_filled[, 1], list(activity_na_filled$interval), mean)
View(steps_per_interval_weekdaytype)
View(activity_na_filled)
activity_na_filled[, 1]
list(activity_na_filled$interval)
library(dplyr)
activity_na_filled %>%
group_by(interval) %>%
summarise_each(funs(mean(., na.rm=TRUE)), -Month)
activity_na_filled %>%
group_by(interval) %>%
summarise_each(funs(mean(., na.rm=TRUE)))
View(steps_per_interval_weekdaytype)
View(steps_per_interval)
View(activity_na_filled)
activity_na_filled %>%
group_by(interval,weekdaytype) %>%
summarise_each(funs(mean(., na.rm=TRUE)))
activity_na_filled %>%
group_by(interval,weekdaytype) %>%
summarise_each(funs(mean(., na.rm=TRUE)),-date)
activity_na_filled %>%
group_by(interval,weekdaytype) %>%
summarise_each(funs(mean(., na.rm=TRUE)),-date -weekend)
activity_na_filled %>%
group_by(interval,weekdaytype) %>%
summarise_each(funs(mean(., na.rm=TRUE)),-date, -weekend)
steps_per_interval_weekdaytype<- activity_na_filled %>%
group_by(interval,weekdaytype) %>%
summarise_each(funs(mean(., na.rm=TRUE)),-date, -weekend)
str(steps_per_interval_weekdaytype)
xyplot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval,type = "l")
xyplot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval|steps_per_interval_weekdaytype$weekdaytype,type = "l")
plot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval|steps_per_interval_weekdaytype$weekdaytype,type = "l")
xyplot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval|steps_per_interval_weekdaytype$weekdaytype,type = "l")
par(mfrow=c(1,2))
xyplot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval|steps_per_interval_weekdaytype$weekdaytype,type = "l")
par(mfrow=c(2,1))
xyplot(steps_per_interval_weekdaytype$steps~steps_per_interval_weekdaytype$interval|steps_per_interval_weekdaytype$weekdaytype,type = "l")
